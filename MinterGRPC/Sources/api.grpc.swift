//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: api.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `MinterApiServiceClient`, then call methods of this protocol to make API calls.
public protocol MinterApiServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: MinterApiServiceClientInterceptorFactoryProtocol? { get }

  func subscribe(
    _ request: MinterSubscribeRequest,
    callOptions: CallOptions?,
    handler: @escaping (MinterSubscribeResponse) -> Void
  ) -> ServerStreamingCall<MinterSubscribeRequest, MinterSubscribeResponse>

  func halts(
    _ request: MinterHaltsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterHaltsRequest, MinterHaltsResponse>

  func genesis(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, MinterGenesisResponse>

  func minGasPrice(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, MinterMinGasPriceResponse>

  func netInfo(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, MinterNetInfoResponse>

  func status(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, MinterStatusResponse>

  func address(
    _ request: MinterAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterAddressRequest, MinterAddressResponse>

  func addresses(
    _ request: MinterAddressesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterAddressesRequest, MinterAddressesResponse>

  func block(
    _ request: MinterBlockRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterBlockRequest, MinterBlockResponse>

  func candidate(
    _ request: MinterCandidateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterCandidateRequest, MinterCandidateResponse>

  func candidates(
    _ request: MinterCandidatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterCandidatesRequest, MinterCandidatesResponse>

  func coinInfoById(
    _ request: MinterCoinIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterCoinIdRequest, MinterCoinInfoResponse>

  func coinInfo(
    _ request: MinterCoinInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterCoinInfoRequest, MinterCoinInfoResponse>

  func estimateCoinBuy(
    _ request: MinterEstimateCoinBuyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterEstimateCoinBuyRequest, MinterEstimateCoinBuyResponse>

  func estimateCoinSell(
    _ request: MinterEstimateCoinSellRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterEstimateCoinSellRequest, MinterEstimateCoinSellResponse>

  func estimateCoinSellAll(
    _ request: MinterEstimateCoinSellAllRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterEstimateCoinSellAllRequest, MinterEstimateCoinSellAllResponse>

  func estimateTxCommission(
    _ request: MinterEstimateTxCommissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterEstimateTxCommissionRequest, MinterEstimateTxCommissionResponse>

  func events(
    _ request: MinterEventsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterEventsRequest, MinterEventsResponse>

  func maxGasPrice(
    _ request: MinterMaxGasPriceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterMaxGasPriceRequest, MinterMaxGasPriceResponse>

  func missedBlocks(
    _ request: MinterMissedBlocksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterMissedBlocksRequest, MinterMissedBlocksResponse>

  func sendTransaction(
    _ request: MinterSendTransactionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterSendTransactionRequest, MinterSendTransactionResponse>

  func transaction(
    _ request: MinterTransactionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterTransactionRequest, MinterTransactionResponse>

  func transactions(
    _ request: MinterTransactionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterTransactionsRequest, MinterTransactionsResponse>

  func unconfirmedTxs(
    _ request: MinterUnconfirmedTxsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterUnconfirmedTxsRequest, MinterUnconfirmedTxsResponse>

  func validators(
    _ request: MinterValidatorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterValidatorsRequest, MinterValidatorsResponse>

  func frozen(
    _ request: MinterFrozenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterFrozenRequest, MinterFrozenResponse>

  func waitList(
    _ request: MinterWaitListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterWaitListRequest, MinterWaitListResponse>

  func testBlock(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, MinterBlockResponse>

  func swapPool(
    _ request: MinterSwapPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterSwapPoolRequest, MinterSwapPoolResponse>

  func swapPoolProvider(
    _ request: MinterSwapPoolProviderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterSwapPoolProviderRequest, MinterSwapPoolResponse>

  func priceCommission(
    _ request: MinterPriceCommissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterPriceCommissionRequest, MinterPriceCommissionResponse>

  func versionNetwork(
    _ request: MinterVersionNetworkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterVersionNetworkRequest, MinterVersionNetworkResponse>

  func commissionVotes(
    _ request: MinterCommissionVotesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterCommissionVotesRequest, MinterCommissionVotesResponse>

  func updateVotes(
    _ request: MinterUpdateVotesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterUpdateVotesRequest, MinterUpdateVotesResponse>

  func blocks(
    _ request: MinterBlocksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterBlocksRequest, MinterBlocksResponse>

  func limitOrder(
    _ request: MinterLimitOrderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterLimitOrderRequest, MinterLimitOrderResponse>

  func limitOrdersOfPool(
    _ request: MinterLimitOrdersOfPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterLimitOrdersOfPoolRequest, MinterLimitOrdersOfPoolResponse>

  func limitOrders(
    _ request: MinterLimitOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MinterLimitOrdersRequest, MinterLimitOrdersResponse>
}

extension MinterApiServiceClientProtocol {
  public var serviceName: String {
    return "api_pb.ApiService"
  }

  /// Subscribe
  /// 
  /// Subscribe returns a subscription for events by query. Only supported in WS and gRPC methods.
  ///
  /// - Parameters:
  ///   - request: Request to send to Subscribe.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func subscribe(
    _ request: MinterSubscribeRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (MinterSubscribeResponse) -> Void
  ) -> ServerStreamingCall<MinterSubscribeRequest, MinterSubscribeResponse> {
    return self.makeServerStreamingCall(
      path: "/api_pb.ApiService/Subscribe",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
      handler: handler
    )
  }

  /// Halts 
  ///
  /// Halts returns the candidate votes for stopping the network at block.
  ///
  /// - Parameters:
  ///   - request: Request to send to Halts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func halts(
    _ request: MinterHaltsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterHaltsRequest, MinterHaltsResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/Halts",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHaltsInterceptors() ?? []
    )
  }

  /// Genesis
  ///
  /// Genesis returns genesis file.
  ///
  /// - Parameters:
  ///   - request: Request to send to Genesis.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func genesis(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, MinterGenesisResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/Genesis",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenesisInterceptors() ?? []
    )
  }

  /// MinGasPrice
  ///
  /// MinGasPrice returns current min gas price.
  ///
  /// - Parameters:
  ///   - request: Request to send to MinGasPrice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func minGasPrice(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, MinterMinGasPriceResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/MinGasPrice",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMinGasPriceInterceptors() ?? []
    )
  }

  /// NetInfo
  ///
  /// NetInfo returns network info
  ///
  /// - Parameters:
  ///   - request: Request to send to NetInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func netInfo(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, MinterNetInfoResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/NetInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNetInfoInterceptors() ?? []
    )
  }

  /// Status
  ///
  /// Status returns node status including pubkey, latest block.
  ///
  /// - Parameters:
  ///   - request: Request to send to Status.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func status(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, MinterStatusResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/Status",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStatusInterceptors() ?? []
    )
  }

  /// Address
  ///
  /// Address returns coins list, balance and transaction count of an address.
  ///
  /// - Parameters:
  ///   - request: Request to send to Address.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func address(
    _ request: MinterAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterAddressRequest, MinterAddressResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/Address",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddressInterceptors() ?? []
    )
  }

  /// Addresses
  ///
  /// Addresses returns list of addresses.
  ///
  /// - Parameters:
  ///   - request: Request to send to Addresses.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addresses(
    _ request: MinterAddressesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterAddressesRequest, MinterAddressesResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/Addresses",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddressesInterceptors() ?? []
    )
  }

  /// Block
  ///
  /// Block returns block data at given height.
  ///
  /// - Parameters:
  ///   - request: Request to send to Block.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func block(
    _ request: MinterBlockRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterBlockRequest, MinterBlockResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/Block",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockInterceptors() ?? []
    )
  }

  /// Candidate
  ///
  /// Candidate returns candidate’s info by provided public key.
  ///
  /// {{import "fields.md"}}
  ///
  /// - Parameters:
  ///   - request: Request to send to Candidate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func candidate(
    _ request: MinterCandidateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterCandidateRequest, MinterCandidateResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/Candidate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCandidateInterceptors() ?? []
    )
  }

  /// Candidates
  ///
  /// Candidates returns list of candidates.
  ///
  /// - Parameters:
  ///   - request: Request to send to Candidates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func candidates(
    _ request: MinterCandidatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterCandidatesRequest, MinterCandidatesResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/Candidates",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCandidatesInterceptors() ?? []
    )
  }

  /// CoinInfoById
  ///
  /// CoinInfoById returns information about coin ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to CoinInfoById.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func coinInfoById(
    _ request: MinterCoinIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterCoinIdRequest, MinterCoinInfoResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/CoinInfoById",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCoinInfoByIdInterceptors() ?? []
    )
  }

  /// CoinInfo
  ///
  /// CoinInfo returns information about coin symbol.
  ///
  /// - Parameters:
  ///   - request: Request to send to CoinInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func coinInfo(
    _ request: MinterCoinInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterCoinInfoRequest, MinterCoinInfoResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/CoinInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCoinInfoInterceptors() ?? []
    )
  }

  /// EstimateCoinBuy
  ///
  /// EstimateCoinBuy returns estimate of buy coin transaction.
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateCoinBuy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func estimateCoinBuy(
    _ request: MinterEstimateCoinBuyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterEstimateCoinBuyRequest, MinterEstimateCoinBuyResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/EstimateCoinBuy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateCoinBuyInterceptors() ?? []
    )
  }

  /// EstimateCoinSell
  ///
  /// EstimateCoinSell returns estimate of sell coin transaction.
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateCoinSell.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func estimateCoinSell(
    _ request: MinterEstimateCoinSellRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterEstimateCoinSellRequest, MinterEstimateCoinSellResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/EstimateCoinSell",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateCoinSellInterceptors() ?? []
    )
  }

  /// EstimateCoinSellAll
  ///
  /// EstimateCoinSellAll returns estimate of sell all coin transaction.
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateCoinSellAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func estimateCoinSellAll(
    _ request: MinterEstimateCoinSellAllRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterEstimateCoinSellAllRequest, MinterEstimateCoinSellAllResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/EstimateCoinSellAll",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateCoinSellAllInterceptors() ?? []
    )
  }

  /// EstimateTxCommission
  ///
  /// EstimateTxCommission returns estimate of transaction.
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateTxCommission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func estimateTxCommission(
    _ request: MinterEstimateTxCommissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterEstimateTxCommissionRequest, MinterEstimateTxCommissionResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/EstimateTxCommission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateTxCommissionInterceptors() ?? []
    )
  }

  /// Events
  ///
  /// Events returns events at given height.
  ///
  /// - Parameters:
  ///   - request: Request to send to Events.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func events(
    _ request: MinterEventsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterEventsRequest, MinterEventsResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/Events",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEventsInterceptors() ?? []
    )
  }

  /// MaxGasPrice
  ///
  /// MaxGasPrice returns current max gas.
  ///
  /// - Parameters:
  ///   - request: Request to send to MaxGasPrice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func maxGasPrice(
    _ request: MinterMaxGasPriceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterMaxGasPriceRequest, MinterMaxGasPriceResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/MaxGasPrice",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMaxGasPriceInterceptors() ?? []
    )
  }

  /// MissedBlocks
  ///
  /// MissedBlocks returns missed blocks by validator public key.
  ///
  /// - Parameters:
  ///   - request: Request to send to MissedBlocks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func missedBlocks(
    _ request: MinterMissedBlocksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterMissedBlocksRequest, MinterMissedBlocksResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/MissedBlocks",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMissedBlocksInterceptors() ?? []
    )
  }

  /// SendTransaction
  ///
  /// SendTransaction returns the result of sending signed tx. To ensure that transaction was successfully committed to the blockchain, you need to find the transaction by the hash and ensure that the status code equals to 0.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendTransaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendTransaction(
    _ request: MinterSendTransactionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterSendTransactionRequest, MinterSendTransactionResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/SendTransaction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendTransactionInterceptors() ?? []
    )
  }

  /// Transaction
  ///
  /// Transaction returns transaction info.
  ///
  /// - Parameters:
  ///   - request: Request to send to Transaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func transaction(
    _ request: MinterTransactionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterTransactionRequest, MinterTransactionResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/Transaction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransactionInterceptors() ?? []
    )
  }

  /// Transactions
  ///
  /// Transactions returns transactions by query.
  ///
  /// - Parameters:
  ///   - request: Request to send to Transactions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func transactions(
    _ request: MinterTransactionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterTransactionsRequest, MinterTransactionsResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/Transactions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransactionsInterceptors() ?? []
    )
  }

  /// UnconfirmedTxs
  ///
  /// UnconfirmedTxs returns unconfirmed transactions.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnconfirmedTxs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func unconfirmedTxs(
    _ request: MinterUnconfirmedTxsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterUnconfirmedTxsRequest, MinterUnconfirmedTxsResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/UnconfirmedTxs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnconfirmedTxsInterceptors() ?? []
    )
  }

  /// Validators
  ///
  /// Validators returns list of active validators.
  ///
  /// - Parameters:
  ///   - request: Request to send to Validators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func validators(
    _ request: MinterValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterValidatorsRequest, MinterValidatorsResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/Validators",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorsInterceptors() ?? []
    )
  }

  /// Frozen
  ///
  /// Frozen returns frozen balance.
  ///
  /// - Parameters:
  ///   - request: Request to send to Frozen.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func frozen(
    _ request: MinterFrozenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterFrozenRequest, MinterFrozenResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/Frozen",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFrozenInterceptors() ?? []
    )
  }

  /// WaitList
  ///
  /// WaitList returns the list of address stakes in waitlist.
  ///
  /// - Parameters:
  ///   - request: Request to send to WaitList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func waitList(
    _ request: MinterWaitListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterWaitListRequest, MinterWaitListResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/WaitList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWaitListInterceptors() ?? []
    )
  }

  /// TestBlock
  ///
  /// TestBlock returns the list of example transactions in block. Available only testnet mode.
  ///
  /// - Parameters:
  ///   - request: Request to send to TestBlock.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func testBlock(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, MinterBlockResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/TestBlock",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTestBlockInterceptors() ?? []
    )
  }

  /// SwapPool
  ///
  /// - Parameters:
  ///   - request: Request to send to SwapPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func swapPool(
    _ request: MinterSwapPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterSwapPoolRequest, MinterSwapPoolResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/SwapPool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSwapPoolInterceptors() ?? []
    )
  }

  /// SwapPoolProvider
  ///
  /// - Parameters:
  ///   - request: Request to send to SwapPoolProvider.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func swapPoolProvider(
    _ request: MinterSwapPoolProviderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterSwapPoolProviderRequest, MinterSwapPoolResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/SwapPoolProvider",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSwapPoolProviderInterceptors() ?? []
    )
  }

  /// PriceCommission
  ///
  /// - Parameters:
  ///   - request: Request to send to PriceCommission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func priceCommission(
    _ request: MinterPriceCommissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterPriceCommissionRequest, MinterPriceCommissionResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/PriceCommission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePriceCommissionInterceptors() ?? []
    )
  }

  /// VersionNetwork
  ///
  /// - Parameters:
  ///   - request: Request to send to VersionNetwork.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func versionNetwork(
    _ request: MinterVersionNetworkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterVersionNetworkRequest, MinterVersionNetworkResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/VersionNetwork",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVersionNetworkInterceptors() ?? []
    )
  }

  /// CommissionVotes
  ///
  /// - Parameters:
  ///   - request: Request to send to CommissionVotes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func commissionVotes(
    _ request: MinterCommissionVotesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterCommissionVotesRequest, MinterCommissionVotesResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/CommissionVotes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommissionVotesInterceptors() ?? []
    )
  }

  /// UpdateVotes
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateVotes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateVotes(
    _ request: MinterUpdateVotesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterUpdateVotesRequest, MinterUpdateVotesResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/UpdateVotes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateVotesInterceptors() ?? []
    )
  }

  /// Blocks
  ///
  /// - Parameters:
  ///   - request: Request to send to Blocks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func blocks(
    _ request: MinterBlocksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterBlocksRequest, MinterBlocksResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/Blocks",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlocksInterceptors() ?? []
    )
  }

  /// LimitOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to LimitOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func limitOrder(
    _ request: MinterLimitOrderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterLimitOrderRequest, MinterLimitOrderResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/LimitOrder",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrderInterceptors() ?? []
    )
  }

  /// LimitOrdersOfPool
  ///
  /// - Parameters:
  ///   - request: Request to send to LimitOrdersOfPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func limitOrdersOfPool(
    _ request: MinterLimitOrdersOfPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterLimitOrdersOfPoolRequest, MinterLimitOrdersOfPoolResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/LimitOrdersOfPool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrdersOfPoolInterceptors() ?? []
    )
  }

  /// LimitOrders
  ///
  /// - Parameters:
  ///   - request: Request to send to LimitOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func limitOrders(
    _ request: MinterLimitOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MinterLimitOrdersRequest, MinterLimitOrdersResponse> {
    return self.makeUnaryCall(
      path: "/api_pb.ApiService/LimitOrders",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLimitOrdersInterceptors() ?? []
    )
  }
}

public protocol MinterApiServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'subscribe'.
  func makeSubscribeInterceptors() -> [ClientInterceptor<MinterSubscribeRequest, MinterSubscribeResponse>]

  /// - Returns: Interceptors to use when invoking 'halts'.
  func makeHaltsInterceptors() -> [ClientInterceptor<MinterHaltsRequest, MinterHaltsResponse>]

  /// - Returns: Interceptors to use when invoking 'genesis'.
  func makeGenesisInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, MinterGenesisResponse>]

  /// - Returns: Interceptors to use when invoking 'minGasPrice'.
  func makeMinGasPriceInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, MinterMinGasPriceResponse>]

  /// - Returns: Interceptors to use when invoking 'netInfo'.
  func makeNetInfoInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, MinterNetInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'status'.
  func makeStatusInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, MinterStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'address'.
  func makeAddressInterceptors() -> [ClientInterceptor<MinterAddressRequest, MinterAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'addresses'.
  func makeAddressesInterceptors() -> [ClientInterceptor<MinterAddressesRequest, MinterAddressesResponse>]

  /// - Returns: Interceptors to use when invoking 'block'.
  func makeBlockInterceptors() -> [ClientInterceptor<MinterBlockRequest, MinterBlockResponse>]

  /// - Returns: Interceptors to use when invoking 'candidate'.
  func makeCandidateInterceptors() -> [ClientInterceptor<MinterCandidateRequest, MinterCandidateResponse>]

  /// - Returns: Interceptors to use when invoking 'candidates'.
  func makeCandidatesInterceptors() -> [ClientInterceptor<MinterCandidatesRequest, MinterCandidatesResponse>]

  /// - Returns: Interceptors to use when invoking 'coinInfoById'.
  func makeCoinInfoByIdInterceptors() -> [ClientInterceptor<MinterCoinIdRequest, MinterCoinInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'coinInfo'.
  func makeCoinInfoInterceptors() -> [ClientInterceptor<MinterCoinInfoRequest, MinterCoinInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'estimateCoinBuy'.
  func makeEstimateCoinBuyInterceptors() -> [ClientInterceptor<MinterEstimateCoinBuyRequest, MinterEstimateCoinBuyResponse>]

  /// - Returns: Interceptors to use when invoking 'estimateCoinSell'.
  func makeEstimateCoinSellInterceptors() -> [ClientInterceptor<MinterEstimateCoinSellRequest, MinterEstimateCoinSellResponse>]

  /// - Returns: Interceptors to use when invoking 'estimateCoinSellAll'.
  func makeEstimateCoinSellAllInterceptors() -> [ClientInterceptor<MinterEstimateCoinSellAllRequest, MinterEstimateCoinSellAllResponse>]

  /// - Returns: Interceptors to use when invoking 'estimateTxCommission'.
  func makeEstimateTxCommissionInterceptors() -> [ClientInterceptor<MinterEstimateTxCommissionRequest, MinterEstimateTxCommissionResponse>]

  /// - Returns: Interceptors to use when invoking 'events'.
  func makeEventsInterceptors() -> [ClientInterceptor<MinterEventsRequest, MinterEventsResponse>]

  /// - Returns: Interceptors to use when invoking 'maxGasPrice'.
  func makeMaxGasPriceInterceptors() -> [ClientInterceptor<MinterMaxGasPriceRequest, MinterMaxGasPriceResponse>]

  /// - Returns: Interceptors to use when invoking 'missedBlocks'.
  func makeMissedBlocksInterceptors() -> [ClientInterceptor<MinterMissedBlocksRequest, MinterMissedBlocksResponse>]

  /// - Returns: Interceptors to use when invoking 'sendTransaction'.
  func makeSendTransactionInterceptors() -> [ClientInterceptor<MinterSendTransactionRequest, MinterSendTransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'transaction'.
  func makeTransactionInterceptors() -> [ClientInterceptor<MinterTransactionRequest, MinterTransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'transactions'.
  func makeTransactionsInterceptors() -> [ClientInterceptor<MinterTransactionsRequest, MinterTransactionsResponse>]

  /// - Returns: Interceptors to use when invoking 'unconfirmedTxs'.
  func makeUnconfirmedTxsInterceptors() -> [ClientInterceptor<MinterUnconfirmedTxsRequest, MinterUnconfirmedTxsResponse>]

  /// - Returns: Interceptors to use when invoking 'validators'.
  func makeValidatorsInterceptors() -> [ClientInterceptor<MinterValidatorsRequest, MinterValidatorsResponse>]

  /// - Returns: Interceptors to use when invoking 'frozen'.
  func makeFrozenInterceptors() -> [ClientInterceptor<MinterFrozenRequest, MinterFrozenResponse>]

  /// - Returns: Interceptors to use when invoking 'waitList'.
  func makeWaitListInterceptors() -> [ClientInterceptor<MinterWaitListRequest, MinterWaitListResponse>]

  /// - Returns: Interceptors to use when invoking 'testBlock'.
  func makeTestBlockInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, MinterBlockResponse>]

  /// - Returns: Interceptors to use when invoking 'swapPool'.
  func makeSwapPoolInterceptors() -> [ClientInterceptor<MinterSwapPoolRequest, MinterSwapPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'swapPoolProvider'.
  func makeSwapPoolProviderInterceptors() -> [ClientInterceptor<MinterSwapPoolProviderRequest, MinterSwapPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'priceCommission'.
  func makePriceCommissionInterceptors() -> [ClientInterceptor<MinterPriceCommissionRequest, MinterPriceCommissionResponse>]

  /// - Returns: Interceptors to use when invoking 'versionNetwork'.
  func makeVersionNetworkInterceptors() -> [ClientInterceptor<MinterVersionNetworkRequest, MinterVersionNetworkResponse>]

  /// - Returns: Interceptors to use when invoking 'commissionVotes'.
  func makeCommissionVotesInterceptors() -> [ClientInterceptor<MinterCommissionVotesRequest, MinterCommissionVotesResponse>]

  /// - Returns: Interceptors to use when invoking 'updateVotes'.
  func makeUpdateVotesInterceptors() -> [ClientInterceptor<MinterUpdateVotesRequest, MinterUpdateVotesResponse>]

  /// - Returns: Interceptors to use when invoking 'blocks'.
  func makeBlocksInterceptors() -> [ClientInterceptor<MinterBlocksRequest, MinterBlocksResponse>]

  /// - Returns: Interceptors to use when invoking 'limitOrder'.
  func makeLimitOrderInterceptors() -> [ClientInterceptor<MinterLimitOrderRequest, MinterLimitOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'limitOrdersOfPool'.
  func makeLimitOrdersOfPoolInterceptors() -> [ClientInterceptor<MinterLimitOrdersOfPoolRequest, MinterLimitOrdersOfPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'limitOrders'.
  func makeLimitOrdersInterceptors() -> [ClientInterceptor<MinterLimitOrdersRequest, MinterLimitOrdersResponse>]
}

public final class MinterApiServiceClient: MinterApiServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: MinterApiServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the api_pb.ApiService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: MinterApiServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol MinterApiServiceProvider: CallHandlerProvider {
  var interceptors: MinterApiServiceServerInterceptorFactoryProtocol? { get }

  /// Subscribe
  /// 
  /// Subscribe returns a subscription for events by query. Only supported in WS and gRPC methods.
  func subscribe(request: MinterSubscribeRequest, context: StreamingResponseCallContext<MinterSubscribeResponse>) -> EventLoopFuture<GRPCStatus>

  /// Halts 
  ///
  /// Halts returns the candidate votes for stopping the network at block.
  func halts(request: MinterHaltsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterHaltsResponse>

  /// Genesis
  ///
  /// Genesis returns genesis file.
  func genesis(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<MinterGenesisResponse>

  /// MinGasPrice
  ///
  /// MinGasPrice returns current min gas price.
  func minGasPrice(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<MinterMinGasPriceResponse>

  /// NetInfo
  ///
  /// NetInfo returns network info
  func netInfo(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<MinterNetInfoResponse>

  /// Status
  ///
  /// Status returns node status including pubkey, latest block.
  func status(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<MinterStatusResponse>

  /// Address
  ///
  /// Address returns coins list, balance and transaction count of an address.
  func address(request: MinterAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterAddressResponse>

  /// Addresses
  ///
  /// Addresses returns list of addresses.
  func addresses(request: MinterAddressesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterAddressesResponse>

  /// Block
  ///
  /// Block returns block data at given height.
  func block(request: MinterBlockRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterBlockResponse>

  /// Candidate
  ///
  /// Candidate returns candidate’s info by provided public key.
  ///
  /// {{import "fields.md"}}
  func candidate(request: MinterCandidateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterCandidateResponse>

  /// Candidates
  ///
  /// Candidates returns list of candidates.
  func candidates(request: MinterCandidatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterCandidatesResponse>

  /// CoinInfoById
  ///
  /// CoinInfoById returns information about coin ID.
  func coinInfoById(request: MinterCoinIdRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterCoinInfoResponse>

  /// CoinInfo
  ///
  /// CoinInfo returns information about coin symbol.
  func coinInfo(request: MinterCoinInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterCoinInfoResponse>

  /// EstimateCoinBuy
  ///
  /// EstimateCoinBuy returns estimate of buy coin transaction.
  func estimateCoinBuy(request: MinterEstimateCoinBuyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterEstimateCoinBuyResponse>

  /// EstimateCoinSell
  ///
  /// EstimateCoinSell returns estimate of sell coin transaction.
  func estimateCoinSell(request: MinterEstimateCoinSellRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterEstimateCoinSellResponse>

  /// EstimateCoinSellAll
  ///
  /// EstimateCoinSellAll returns estimate of sell all coin transaction.
  func estimateCoinSellAll(request: MinterEstimateCoinSellAllRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterEstimateCoinSellAllResponse>

  /// EstimateTxCommission
  ///
  /// EstimateTxCommission returns estimate of transaction.
  func estimateTxCommission(request: MinterEstimateTxCommissionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterEstimateTxCommissionResponse>

  /// Events
  ///
  /// Events returns events at given height.
  func events(request: MinterEventsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterEventsResponse>

  /// MaxGasPrice
  ///
  /// MaxGasPrice returns current max gas.
  func maxGasPrice(request: MinterMaxGasPriceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterMaxGasPriceResponse>

  /// MissedBlocks
  ///
  /// MissedBlocks returns missed blocks by validator public key.
  func missedBlocks(request: MinterMissedBlocksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterMissedBlocksResponse>

  /// SendTransaction
  ///
  /// SendTransaction returns the result of sending signed tx. To ensure that transaction was successfully committed to the blockchain, you need to find the transaction by the hash and ensure that the status code equals to 0.
  func sendTransaction(request: MinterSendTransactionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterSendTransactionResponse>

  /// Transaction
  ///
  /// Transaction returns transaction info.
  func transaction(request: MinterTransactionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterTransactionResponse>

  /// Transactions
  ///
  /// Transactions returns transactions by query.
  func transactions(request: MinterTransactionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterTransactionsResponse>

  /// UnconfirmedTxs
  ///
  /// UnconfirmedTxs returns unconfirmed transactions.
  func unconfirmedTxs(request: MinterUnconfirmedTxsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterUnconfirmedTxsResponse>

  /// Validators
  ///
  /// Validators returns list of active validators.
  func validators(request: MinterValidatorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterValidatorsResponse>

  /// Frozen
  ///
  /// Frozen returns frozen balance.
  func frozen(request: MinterFrozenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterFrozenResponse>

  /// WaitList
  ///
  /// WaitList returns the list of address stakes in waitlist.
  func waitList(request: MinterWaitListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterWaitListResponse>

  /// TestBlock
  ///
  /// TestBlock returns the list of example transactions in block. Available only testnet mode.
  func testBlock(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<MinterBlockResponse>

  /// SwapPool
  func swapPool(request: MinterSwapPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterSwapPoolResponse>

  /// SwapPoolProvider
  func swapPoolProvider(request: MinterSwapPoolProviderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterSwapPoolResponse>

  /// PriceCommission
  func priceCommission(request: MinterPriceCommissionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterPriceCommissionResponse>

  /// VersionNetwork
  func versionNetwork(request: MinterVersionNetworkRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterVersionNetworkResponse>

  /// CommissionVotes
  func commissionVotes(request: MinterCommissionVotesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterCommissionVotesResponse>

  /// UpdateVotes
  func updateVotes(request: MinterUpdateVotesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterUpdateVotesResponse>

  /// Blocks
  func blocks(request: MinterBlocksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterBlocksResponse>

  /// LimitOrder
  func limitOrder(request: MinterLimitOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterLimitOrderResponse>

  /// LimitOrdersOfPool
  func limitOrdersOfPool(request: MinterLimitOrdersOfPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterLimitOrdersOfPoolResponse>

  /// LimitOrders
  func limitOrders(request: MinterLimitOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MinterLimitOrdersResponse>
}

extension MinterApiServiceProvider {
  public var serviceName: Substring { return "api_pb.ApiService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Subscribe":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterSubscribeRequest>(),
        responseSerializer: ProtobufSerializer<MinterSubscribeResponse>(),
        interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
        userFunction: self.subscribe(request:context:)
      )

    case "Halts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterHaltsRequest>(),
        responseSerializer: ProtobufSerializer<MinterHaltsResponse>(),
        interceptors: self.interceptors?.makeHaltsInterceptors() ?? [],
        userFunction: self.halts(request:context:)
      )

    case "Genesis":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<MinterGenesisResponse>(),
        interceptors: self.interceptors?.makeGenesisInterceptors() ?? [],
        userFunction: self.genesis(request:context:)
      )

    case "MinGasPrice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<MinterMinGasPriceResponse>(),
        interceptors: self.interceptors?.makeMinGasPriceInterceptors() ?? [],
        userFunction: self.minGasPrice(request:context:)
      )

    case "NetInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<MinterNetInfoResponse>(),
        interceptors: self.interceptors?.makeNetInfoInterceptors() ?? [],
        userFunction: self.netInfo(request:context:)
      )

    case "Status":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<MinterStatusResponse>(),
        interceptors: self.interceptors?.makeStatusInterceptors() ?? [],
        userFunction: self.status(request:context:)
      )

    case "Address":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterAddressRequest>(),
        responseSerializer: ProtobufSerializer<MinterAddressResponse>(),
        interceptors: self.interceptors?.makeAddressInterceptors() ?? [],
        userFunction: self.address(request:context:)
      )

    case "Addresses":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterAddressesRequest>(),
        responseSerializer: ProtobufSerializer<MinterAddressesResponse>(),
        interceptors: self.interceptors?.makeAddressesInterceptors() ?? [],
        userFunction: self.addresses(request:context:)
      )

    case "Block":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterBlockRequest>(),
        responseSerializer: ProtobufSerializer<MinterBlockResponse>(),
        interceptors: self.interceptors?.makeBlockInterceptors() ?? [],
        userFunction: self.block(request:context:)
      )

    case "Candidate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterCandidateRequest>(),
        responseSerializer: ProtobufSerializer<MinterCandidateResponse>(),
        interceptors: self.interceptors?.makeCandidateInterceptors() ?? [],
        userFunction: self.candidate(request:context:)
      )

    case "Candidates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterCandidatesRequest>(),
        responseSerializer: ProtobufSerializer<MinterCandidatesResponse>(),
        interceptors: self.interceptors?.makeCandidatesInterceptors() ?? [],
        userFunction: self.candidates(request:context:)
      )

    case "CoinInfoById":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterCoinIdRequest>(),
        responseSerializer: ProtobufSerializer<MinterCoinInfoResponse>(),
        interceptors: self.interceptors?.makeCoinInfoByIdInterceptors() ?? [],
        userFunction: self.coinInfoById(request:context:)
      )

    case "CoinInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterCoinInfoRequest>(),
        responseSerializer: ProtobufSerializer<MinterCoinInfoResponse>(),
        interceptors: self.interceptors?.makeCoinInfoInterceptors() ?? [],
        userFunction: self.coinInfo(request:context:)
      )

    case "EstimateCoinBuy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterEstimateCoinBuyRequest>(),
        responseSerializer: ProtobufSerializer<MinterEstimateCoinBuyResponse>(),
        interceptors: self.interceptors?.makeEstimateCoinBuyInterceptors() ?? [],
        userFunction: self.estimateCoinBuy(request:context:)
      )

    case "EstimateCoinSell":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterEstimateCoinSellRequest>(),
        responseSerializer: ProtobufSerializer<MinterEstimateCoinSellResponse>(),
        interceptors: self.interceptors?.makeEstimateCoinSellInterceptors() ?? [],
        userFunction: self.estimateCoinSell(request:context:)
      )

    case "EstimateCoinSellAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterEstimateCoinSellAllRequest>(),
        responseSerializer: ProtobufSerializer<MinterEstimateCoinSellAllResponse>(),
        interceptors: self.interceptors?.makeEstimateCoinSellAllInterceptors() ?? [],
        userFunction: self.estimateCoinSellAll(request:context:)
      )

    case "EstimateTxCommission":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterEstimateTxCommissionRequest>(),
        responseSerializer: ProtobufSerializer<MinterEstimateTxCommissionResponse>(),
        interceptors: self.interceptors?.makeEstimateTxCommissionInterceptors() ?? [],
        userFunction: self.estimateTxCommission(request:context:)
      )

    case "Events":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterEventsRequest>(),
        responseSerializer: ProtobufSerializer<MinterEventsResponse>(),
        interceptors: self.interceptors?.makeEventsInterceptors() ?? [],
        userFunction: self.events(request:context:)
      )

    case "MaxGasPrice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterMaxGasPriceRequest>(),
        responseSerializer: ProtobufSerializer<MinterMaxGasPriceResponse>(),
        interceptors: self.interceptors?.makeMaxGasPriceInterceptors() ?? [],
        userFunction: self.maxGasPrice(request:context:)
      )

    case "MissedBlocks":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterMissedBlocksRequest>(),
        responseSerializer: ProtobufSerializer<MinterMissedBlocksResponse>(),
        interceptors: self.interceptors?.makeMissedBlocksInterceptors() ?? [],
        userFunction: self.missedBlocks(request:context:)
      )

    case "SendTransaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterSendTransactionRequest>(),
        responseSerializer: ProtobufSerializer<MinterSendTransactionResponse>(),
        interceptors: self.interceptors?.makeSendTransactionInterceptors() ?? [],
        userFunction: self.sendTransaction(request:context:)
      )

    case "Transaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterTransactionRequest>(),
        responseSerializer: ProtobufSerializer<MinterTransactionResponse>(),
        interceptors: self.interceptors?.makeTransactionInterceptors() ?? [],
        userFunction: self.transaction(request:context:)
      )

    case "Transactions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterTransactionsRequest>(),
        responseSerializer: ProtobufSerializer<MinterTransactionsResponse>(),
        interceptors: self.interceptors?.makeTransactionsInterceptors() ?? [],
        userFunction: self.transactions(request:context:)
      )

    case "UnconfirmedTxs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterUnconfirmedTxsRequest>(),
        responseSerializer: ProtobufSerializer<MinterUnconfirmedTxsResponse>(),
        interceptors: self.interceptors?.makeUnconfirmedTxsInterceptors() ?? [],
        userFunction: self.unconfirmedTxs(request:context:)
      )

    case "Validators":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterValidatorsRequest>(),
        responseSerializer: ProtobufSerializer<MinterValidatorsResponse>(),
        interceptors: self.interceptors?.makeValidatorsInterceptors() ?? [],
        userFunction: self.validators(request:context:)
      )

    case "Frozen":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterFrozenRequest>(),
        responseSerializer: ProtobufSerializer<MinterFrozenResponse>(),
        interceptors: self.interceptors?.makeFrozenInterceptors() ?? [],
        userFunction: self.frozen(request:context:)
      )

    case "WaitList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterWaitListRequest>(),
        responseSerializer: ProtobufSerializer<MinterWaitListResponse>(),
        interceptors: self.interceptors?.makeWaitListInterceptors() ?? [],
        userFunction: self.waitList(request:context:)
      )

    case "TestBlock":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<MinterBlockResponse>(),
        interceptors: self.interceptors?.makeTestBlockInterceptors() ?? [],
        userFunction: self.testBlock(request:context:)
      )

    case "SwapPool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterSwapPoolRequest>(),
        responseSerializer: ProtobufSerializer<MinterSwapPoolResponse>(),
        interceptors: self.interceptors?.makeSwapPoolInterceptors() ?? [],
        userFunction: self.swapPool(request:context:)
      )

    case "SwapPoolProvider":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterSwapPoolProviderRequest>(),
        responseSerializer: ProtobufSerializer<MinterSwapPoolResponse>(),
        interceptors: self.interceptors?.makeSwapPoolProviderInterceptors() ?? [],
        userFunction: self.swapPoolProvider(request:context:)
      )

    case "PriceCommission":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterPriceCommissionRequest>(),
        responseSerializer: ProtobufSerializer<MinterPriceCommissionResponse>(),
        interceptors: self.interceptors?.makePriceCommissionInterceptors() ?? [],
        userFunction: self.priceCommission(request:context:)
      )

    case "VersionNetwork":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterVersionNetworkRequest>(),
        responseSerializer: ProtobufSerializer<MinterVersionNetworkResponse>(),
        interceptors: self.interceptors?.makeVersionNetworkInterceptors() ?? [],
        userFunction: self.versionNetwork(request:context:)
      )

    case "CommissionVotes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterCommissionVotesRequest>(),
        responseSerializer: ProtobufSerializer<MinterCommissionVotesResponse>(),
        interceptors: self.interceptors?.makeCommissionVotesInterceptors() ?? [],
        userFunction: self.commissionVotes(request:context:)
      )

    case "UpdateVotes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterUpdateVotesRequest>(),
        responseSerializer: ProtobufSerializer<MinterUpdateVotesResponse>(),
        interceptors: self.interceptors?.makeUpdateVotesInterceptors() ?? [],
        userFunction: self.updateVotes(request:context:)
      )

    case "Blocks":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterBlocksRequest>(),
        responseSerializer: ProtobufSerializer<MinterBlocksResponse>(),
        interceptors: self.interceptors?.makeBlocksInterceptors() ?? [],
        userFunction: self.blocks(request:context:)
      )

    case "LimitOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterLimitOrderRequest>(),
        responseSerializer: ProtobufSerializer<MinterLimitOrderResponse>(),
        interceptors: self.interceptors?.makeLimitOrderInterceptors() ?? [],
        userFunction: self.limitOrder(request:context:)
      )

    case "LimitOrdersOfPool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterLimitOrdersOfPoolRequest>(),
        responseSerializer: ProtobufSerializer<MinterLimitOrdersOfPoolResponse>(),
        interceptors: self.interceptors?.makeLimitOrdersOfPoolInterceptors() ?? [],
        userFunction: self.limitOrdersOfPool(request:context:)
      )

    case "LimitOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MinterLimitOrdersRequest>(),
        responseSerializer: ProtobufSerializer<MinterLimitOrdersResponse>(),
        interceptors: self.interceptors?.makeLimitOrdersInterceptors() ?? [],
        userFunction: self.limitOrders(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol MinterApiServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'subscribe'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeInterceptors() -> [ServerInterceptor<MinterSubscribeRequest, MinterSubscribeResponse>]

  /// - Returns: Interceptors to use when handling 'halts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHaltsInterceptors() -> [ServerInterceptor<MinterHaltsRequest, MinterHaltsResponse>]

  /// - Returns: Interceptors to use when handling 'genesis'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGenesisInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, MinterGenesisResponse>]

  /// - Returns: Interceptors to use when handling 'minGasPrice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMinGasPriceInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, MinterMinGasPriceResponse>]

  /// - Returns: Interceptors to use when handling 'netInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNetInfoInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, MinterNetInfoResponse>]

  /// - Returns: Interceptors to use when handling 'status'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStatusInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, MinterStatusResponse>]

  /// - Returns: Interceptors to use when handling 'address'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddressInterceptors() -> [ServerInterceptor<MinterAddressRequest, MinterAddressResponse>]

  /// - Returns: Interceptors to use when handling 'addresses'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddressesInterceptors() -> [ServerInterceptor<MinterAddressesRequest, MinterAddressesResponse>]

  /// - Returns: Interceptors to use when handling 'block'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBlockInterceptors() -> [ServerInterceptor<MinterBlockRequest, MinterBlockResponse>]

  /// - Returns: Interceptors to use when handling 'candidate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCandidateInterceptors() -> [ServerInterceptor<MinterCandidateRequest, MinterCandidateResponse>]

  /// - Returns: Interceptors to use when handling 'candidates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCandidatesInterceptors() -> [ServerInterceptor<MinterCandidatesRequest, MinterCandidatesResponse>]

  /// - Returns: Interceptors to use when handling 'coinInfoById'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCoinInfoByIdInterceptors() -> [ServerInterceptor<MinterCoinIdRequest, MinterCoinInfoResponse>]

  /// - Returns: Interceptors to use when handling 'coinInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCoinInfoInterceptors() -> [ServerInterceptor<MinterCoinInfoRequest, MinterCoinInfoResponse>]

  /// - Returns: Interceptors to use when handling 'estimateCoinBuy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEstimateCoinBuyInterceptors() -> [ServerInterceptor<MinterEstimateCoinBuyRequest, MinterEstimateCoinBuyResponse>]

  /// - Returns: Interceptors to use when handling 'estimateCoinSell'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEstimateCoinSellInterceptors() -> [ServerInterceptor<MinterEstimateCoinSellRequest, MinterEstimateCoinSellResponse>]

  /// - Returns: Interceptors to use when handling 'estimateCoinSellAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEstimateCoinSellAllInterceptors() -> [ServerInterceptor<MinterEstimateCoinSellAllRequest, MinterEstimateCoinSellAllResponse>]

  /// - Returns: Interceptors to use when handling 'estimateTxCommission'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEstimateTxCommissionInterceptors() -> [ServerInterceptor<MinterEstimateTxCommissionRequest, MinterEstimateTxCommissionResponse>]

  /// - Returns: Interceptors to use when handling 'events'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEventsInterceptors() -> [ServerInterceptor<MinterEventsRequest, MinterEventsResponse>]

  /// - Returns: Interceptors to use when handling 'maxGasPrice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMaxGasPriceInterceptors() -> [ServerInterceptor<MinterMaxGasPriceRequest, MinterMaxGasPriceResponse>]

  /// - Returns: Interceptors to use when handling 'missedBlocks'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMissedBlocksInterceptors() -> [ServerInterceptor<MinterMissedBlocksRequest, MinterMissedBlocksResponse>]

  /// - Returns: Interceptors to use when handling 'sendTransaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendTransactionInterceptors() -> [ServerInterceptor<MinterSendTransactionRequest, MinterSendTransactionResponse>]

  /// - Returns: Interceptors to use when handling 'transaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransactionInterceptors() -> [ServerInterceptor<MinterTransactionRequest, MinterTransactionResponse>]

  /// - Returns: Interceptors to use when handling 'transactions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransactionsInterceptors() -> [ServerInterceptor<MinterTransactionsRequest, MinterTransactionsResponse>]

  /// - Returns: Interceptors to use when handling 'unconfirmedTxs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnconfirmedTxsInterceptors() -> [ServerInterceptor<MinterUnconfirmedTxsRequest, MinterUnconfirmedTxsResponse>]

  /// - Returns: Interceptors to use when handling 'validators'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatorsInterceptors() -> [ServerInterceptor<MinterValidatorsRequest, MinterValidatorsResponse>]

  /// - Returns: Interceptors to use when handling 'frozen'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFrozenInterceptors() -> [ServerInterceptor<MinterFrozenRequest, MinterFrozenResponse>]

  /// - Returns: Interceptors to use when handling 'waitList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWaitListInterceptors() -> [ServerInterceptor<MinterWaitListRequest, MinterWaitListResponse>]

  /// - Returns: Interceptors to use when handling 'testBlock'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTestBlockInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, MinterBlockResponse>]

  /// - Returns: Interceptors to use when handling 'swapPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSwapPoolInterceptors() -> [ServerInterceptor<MinterSwapPoolRequest, MinterSwapPoolResponse>]

  /// - Returns: Interceptors to use when handling 'swapPoolProvider'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSwapPoolProviderInterceptors() -> [ServerInterceptor<MinterSwapPoolProviderRequest, MinterSwapPoolResponse>]

  /// - Returns: Interceptors to use when handling 'priceCommission'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePriceCommissionInterceptors() -> [ServerInterceptor<MinterPriceCommissionRequest, MinterPriceCommissionResponse>]

  /// - Returns: Interceptors to use when handling 'versionNetwork'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVersionNetworkInterceptors() -> [ServerInterceptor<MinterVersionNetworkRequest, MinterVersionNetworkResponse>]

  /// - Returns: Interceptors to use when handling 'commissionVotes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCommissionVotesInterceptors() -> [ServerInterceptor<MinterCommissionVotesRequest, MinterCommissionVotesResponse>]

  /// - Returns: Interceptors to use when handling 'updateVotes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateVotesInterceptors() -> [ServerInterceptor<MinterUpdateVotesRequest, MinterUpdateVotesResponse>]

  /// - Returns: Interceptors to use when handling 'blocks'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBlocksInterceptors() -> [ServerInterceptor<MinterBlocksRequest, MinterBlocksResponse>]

  /// - Returns: Interceptors to use when handling 'limitOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLimitOrderInterceptors() -> [ServerInterceptor<MinterLimitOrderRequest, MinterLimitOrderResponse>]

  /// - Returns: Interceptors to use when handling 'limitOrdersOfPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLimitOrdersOfPoolInterceptors() -> [ServerInterceptor<MinterLimitOrdersOfPoolRequest, MinterLimitOrdersOfPoolResponse>]

  /// - Returns: Interceptors to use when handling 'limitOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLimitOrdersInterceptors() -> [ServerInterceptor<MinterLimitOrdersRequest, MinterLimitOrdersResponse>]
}
